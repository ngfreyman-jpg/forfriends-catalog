/* ForFriends ‚Äî –∫–∞—Ç–∞–ª–æ–≥ —Å –∫–æ—Ä–∑–∏–Ω–æ–π (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)
   –¢—Ä–µ–±—É–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
   - ./catalog/categories.json: ["–í—Å–µ","–∫–∞—Ç–µ–≥–æ—Ä–∏—è1","–∫–∞—Ç–µ–≥–æ—Ä–∏—è2",...]
   - ./catalog/products.json: [{id,title,price,category,photo,desc}]
*/

(() => {
  const tg = window.Telegram?.WebApp;
  if (tg?.expand) try { tg.expand(); } catch {}

  // ---------- Helpers ----------
  const qs  = (s, r=document) => r.querySelector(s);
  const qsa = (s, r=document) => [...r.querySelectorAll(s)];
  const fmt = n => (n||0).toLocaleString('ru-RU');

  const CART_KEY = 'ff_cart_v2';

  const state = {
    categories: [],
    products: [],
    filter: '–í—Å–µ',
    cart: loadCart(),            // [{id, title, price, qty, comment?}]
    current: null                // –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
  };

  function saveCart() {
    localStorage.setItem(CART_KEY, JSON.stringify(state.cart));
    updateCartFab();
  }
  function loadCart() {
    try { return JSON.parse(localStorage.getItem(CART_KEY)) || []; }
    catch { return []; }
  }
  function cartTotals() {
    const qty = state.cart.reduce((s,i)=>s+i.qty,0);
    const sum = state.cart.reduce((s,i)=>s+i.price*i.qty,0);
    return {qty, sum};
  }

  // ---------- –†–µ–Ω–¥–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π ----------
  const tabs = qs('#tabs');
  function renderCategories() {
    tabs.innerHTML = '';
    const cats = ['–í—Å–µ', ...state.categories.filter(Boolean)];
    cats.forEach(cat => {
      const b = document.createElement('button');
      b.type = 'button';
      b.className = 'tab' + (state.filter === cat ? ' active' : '');
      b.textContent = cat;
      b.addEventListener('click', () => {
        state.filter = cat;
        renderGrid();
      });
      tabs.appendChild(b);
    });
  }

  // ---------- –†–µ–Ω–¥–µ—Ä —Å–µ—Ç–∫–∏ ----------
  const grid = qs('#grid');
  function renderGrid() {
    grid.innerHTML = '';
    const items = state.products.filter(p => state.filter === '–í—Å–µ' || p.category === state.filter);
    if (!items.length) {
      grid.innerHTML = `<div class="empty">–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–æ</div>`;
      return;
    }
    for (const p of items) {
      const card = document.createElement('article');
      card.className = 'card';
      card.innerHTML = `
        <div class="media"><img class="photo" src="${p.photo || ''}" alt=""></div>
        <div class="info">
          <div class="title">${p.title || ''}</div>
          <div class="sku">${p.id || ''}</div>
          <div class="price">${fmt(p.price)} ‚ÇΩ</div>
        </div>
        <button class="btn" type="button">–û—Ç–∫—Ä—ã—Ç—å</button>
      `;
      card.querySelector('.btn').addEventListener('click', () => openProduct(p));
      grid.appendChild(card);
    }
  }

  // ---------- –ú–æ–¥–∞–ª–∫–∞ —Ç–æ–≤–∞—Ä–∞ ----------
  const modal = qs('#productModal');
  const pm = {
    photo: qs('#pm_photo'),
    title: qs('#pm_title'),
    sku:   qs('#pm_sku'),
    price: qs('#pm_price'),
    desc:  qs('#pm_desc'),
    comment: qs('#pm_comment'),
    add:   qs('#pm_add'),
    back:  qs('#pm_back'),
    panel: qs('#pm_panel')
  };

  function openProduct(p) {
    state.current = p;
    pm.photo.src = p.photo || '';
    pm.title.textContent = p.title || '';
    pm.sku.textContent = p.id || '';
    pm.price.textContent = fmt(p.price || 0);
    pm.desc.textContent = p.desc || '';
    pm.comment.value = '';
    modal.classList.add('open');
    modal.setAttribute('aria-hidden', 'false');
    pm.panel.focus();
  }
  function closeProduct() {
    modal.classList.remove('open');
    modal.setAttribute('aria-hidden', 'true');
    state.current = null;
  }
  qsa('[data-close="pm"]', modal).forEach(el => el.addEventListener('click', closeProduct));

  pm.back.addEventListener('click', closeProduct);
  pm.add.addEventListener('click', () => {
    const p = state.current;
    if (!p) return;
    const inCart = state.cart.find(i => i.id === p.id);
    if (inCart) inCart.qty += 1;
    else state.cart.push({ id:p.id, title:p.title, price:+p.price||0, qty:1 });
    // –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –º–æ–¥–∞–ª–∫–∏ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º, –µ—Å–ª–∏ –µ—Å—Ç—å:
    const c = pm.comment.value.trim();
    if (c) state.cart.find(i=>i.id===p.id).comment = c;

    saveCart();
    // –∫–æ—Ä–æ—Ç–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –≤ Telegram WebApp
    try { tg.HapticFeedback?.impactOccurred?.('light'); } catch {}
    pm.add.classList.add('shake');
    setTimeout(()=>pm.add.classList.remove('shake'), 300);
  });

  // ---------- FAB –∫–æ—Ä–∑–∏–Ω—ã ----------
  const cartBtn = qs('#cartBtn');
  function updateCartFab() {
    const {qty,sum} = cartTotals();
    cartBtn.textContent = `üõí –ö–æ—Ä–∑–∏–Ω–∞ (${qty}) ‚Ä¢ ${fmt(sum)} ‚ÇΩ`;
  }
  updateCartFab();

  // ---------- –û–≤–µ—Ä–ª–µ–π –∫–æ—Ä–∑–∏–Ω—ã ----------
  const cartSheet = qs('#cartSheet');
  const cartList  = qs('#cartList');
  const cartClose = qs('#cartClose');
  const cartTotal = qs('#cartTotal');
  const cartSend  = qs('#cartSend');
  const cartComment = qs('#cartComment');

  cartBtn.addEventListener('click', () => {
    renderCart();
    cartSheet.setAttribute('aria-hidden','false');
  });
  cartClose.addEventListener('click', () => {
    cartSheet.setAttribute('aria-hidden','true');
  });
  cartSheet.addEventListener('click', (e)=>{
    if (e.target === cartSheet) cartSheet.setAttribute('aria-hidden','true');
  });

  function renderCart() {
    cartList.innerHTML = '';
    if (!state.cart.length) {
      cartList.innerHTML = `<div class="empty">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</div>`;
      cartSend.disabled = true;
      cartTotal.textContent = '0 ‚ÇΩ';
      return;
    }
    for (const item of state.cart) {
      const row = document.createElement('div');
      row.className = 'cart-item';
      row.innerHTML = `
        <div>
          <div class="cart-item__title">${item.title}</div>
          <div class="cart-item__meta">${item.id} ‚Ä¢ ${fmt(item.price)} ‚ÇΩ${item.comment ? ` ‚Ä¢ ${item.comment}`:''}</div>
        </div>
        <div class="cart-item__controls">
          <button class="cart-btn" data-act="dec">‚Äì</button>
          <span class="cart-qty">${item.qty}</span>
          <button class="cart-btn" data-act="inc">+</button>
          <button class="cart-remove" data-act="rem">–£–¥–∞–ª–∏—Ç—å</button>
        </div>
      `;
      row.querySelector('[data-act="inc"]').addEventListener('click', ()=>{ item.qty++; saveCart(); renderCart(); });
      row.querySelector('[data-act="dec"]').addEventListener('click', ()=>{
        item.qty = Math.max(1, item.qty-1); saveCart(); renderCart();
      });
      row.querySelector('[data-act="rem"]').addEventListener('click', ()=>{
        state.cart = state.cart.filter(x=>x.id!==item.id); saveCart(); renderCart();
      });
      cartList.appendChild(row);
    }
    const {sum} = cartTotals();
    cartTotal.textContent = `${fmt(sum)} ‚ÇΩ`;
    cartSend.disabled = !state.cart.length;
  }

  // ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–¥–∞–≤—Ü—É ----------
  cartSend.addEventListener('click', () => {
    if (!state.cart.length) return;

    const brief = state.cart.map(i => ({
      id: i.id, title: i.title, price: i.price, qty: i.qty
    }));
    const payload = {
      items: brief,
      total: cartTotals().sum,
      comment: cartComment.value.trim() || '',
      ts: Date.now()
    };

    try {
      tg?.sendData(JSON.stringify(payload));
      // –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      alert('‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –õ–° –±–æ—Ç–∞.');
      // –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º
      state.cart = [];
      saveCart();
      renderCart();
      cartSheet.setAttribute('aria-hidden','true');
      // tg.close(); // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å—Ä–∞–∑—É
    } catch (err) {
      console.error(err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
  });

  // ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞ ----------
  async function fetchJSON(path) {
    const res = await fetch(path, { cache: 'no-store' });
    if (!res.ok) throw new Error(`${path}: ${res.status}`);
    return res.json();
  }

  async function boot() {
    try {
      const [cats, prods] = await Promise.all([
        fetchJSON('./catalog/categories.json'),
        fetchJSON('./catalog/products.json')
      ]);
      state.categories = Array.isArray(cats) ? cats : [];
      state.products   = Array.isArray(prods) ? prods : [];
      if (!state.categories.includes('–í—Å–µ')) state.categories.unshift('–í—Å–µ');
      renderCategories();
      renderGrid();

      // –≥–ª—É–±–æ–∫–∞—è —Å—Å—ã–ª–∫–∞ ?id=SKU
      const pid = new URL(location.href).searchParams.get('id');
      if (pid) {
        const p = state.products.find(x => String(x.id) === String(pid));
        if (p) openProduct(p);
      }
    } catch (e) {
      console.error(e);
      grid.innerHTML = `<div class="empty">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥.</div>`;
    }
  }

  boot();
})();
